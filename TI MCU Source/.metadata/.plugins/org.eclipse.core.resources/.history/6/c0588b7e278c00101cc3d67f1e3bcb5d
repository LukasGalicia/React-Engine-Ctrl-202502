/*
 * CROSSCHANNEL.h
 *
 *  Created on: 4 sep 2025
 *      Author: lukas
 */

#ifndef SOURCE_PROJLIB_CROSSCHANNEL_H_
#define SOURCE_PROJLIB_CROSSCHANNEL_H_

#include "sys_common.h"

/* Include files */
// Project includes
#include "../embedded_SCADE/SCADE_global_lib.h"

// Driver includes
#include "spi.h"

// Std C includes
#include <stdlib.h>
#include <stdio.h>

struct ARINC_Msg_Frame_Format
{
    uint8_t LABEL;
    uint8_t SDI;
    uint8_t SSM;
};
typedef struct ARINC_Msg_Frame_Format ARINC_Frame_Mdata;

/* ARINC MESSAGE FORMATS */
// LABEL Formats
#define ARINC_LABEL_BackupAcknowledge   0xBAU
#define ARINC_LABEL_MainHX711ready      0xA7U
#define ARINC_LABEL_BackupHX711ready    0xB7U
#define ARINC_LABEL_MainHX711_data      0xA6U
#define ARINC_LABEL_BackupHX711_data    0xB6U

// SDI Formats
#define ARINC_SDI_Backup    0x00U
#define ARINC_SDI_Main      0x01U

// Default DATA
#define ARINC_DATA_DEFAULT  0x000CFFFF

// SSM Formats
#define ARINC_SSM_ValuePos  0b00U
#define ARINC_SSM_FnTest    0b10U
#define ARINC_SSM_NormOp    0b11U
#define ARINC_SSM_ValueNeg  0b11U

/* Standard SCADEif structs */
// ARINC Encoders
inC_ARINC_INT_ENCDR     CCmsg_INT_DATA_OUTBOUND;
outC_ARINC_INT_ENCDR    CCmsg_INT_FRAME_OUTBOUND;

// ARINC Decoders
inC_ARINC_INT_DCDR      CCmsg_FRAME_INBOUND;
outC_ARINC_INT_DCDR     CCmsg_DATA_INBOUND;

/* Comm defines */
#define SPI_blocksize   2U

/* Cross-channel Comm fn prototypes */
void CrossChReceive(uint8_t *MsgLABEL, uint8_t *MsgSDI, int32_t *MsgDATA, uint8_t *MsgSSM, bool negValExp);
void CrossChTransmit(uint8_t MsgLABEL, uint8_t MsgSDI, int32_t MsgDATA, uint8_t MsgSSM);
void CrossChTransmitandReceive(uint8_t *InLABEL, uint8_t *InSDI, int32_t *InDATA, uint8_t *InSSM, bool negValExp,
                               uint8_t OutLABEL, uint8_t OutSDI, int32_t OutDATA, uint8_t OutSSM);

#endif /* SOURCE_PROJLIB_CROSSCHANNEL_H_ */
